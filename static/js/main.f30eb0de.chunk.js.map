{"version":3,"sources":["utils.js","App.js","serviceWorker.js","index.js"],"names":["defaultColor","THREE","transferArrayBufferToVect","arrBuffer","floatArr","Float32Array","arr","i","length","z","vect","x","y","push","generateGeometry","pushDataToGeometry","geometry","data","vertices","map","d","colors","Array","fill","concat","generatePointCloud","pointMaterial","size","sizeAttenuation","vertexColors","generateScene","ele","document","getElementById","scene","SCREEN_WIDTH","clientWidth","SCREEN_HEIGHT","clientHeight","ASPECT","camera","position","set","lookAt","add","axes","renderer","setSize","object","orbitControls","Orbitcontrols","domElement","window","q","MapWithPolyline","withScriptjs","withGoogleMap","props","react_default","a","createElement","lib","defaultZoom","center","currentLatLng","path","polylinePath","delay","ms","Promise","solve","setTimeout","options","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","lat","lng","count","imageFolder","componentDidMount","util","container","current","appendChild","animate","requestAnimationFrame","render","start","fetchData","asyncToGenerator","regenerator_default","mark","_callee","no","wrap","_context","prev","next","slice","fetch","then","res","arrayBuffer","positionArr","vectArray","lastPointCloud","remove","dispose","text","file","split","geolocation","Number","toConsumableArray","setState","console","log","stop","_callee2","_context2","play","abrupt","t0","finish","reset","changeImageFolder","e","target","value","React","createRef","className","onChange","key","googleMapURL","loadingElement","containerElement","style","width","height","mapElement","id","ref","src","alt","onClick","Component","Boolean","location","hostname","match","ReactDOM","App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f30eb0de.chunk.js","sourcesContent":["import * as THREE from 'three';\nimport Orbitcontrols from 'three-orbitcontrols';\n\nconst chunkSize = 4;\nconst defaultColor = new THREE.Color('skyblue');\n\nexport const transferArrayBufferToVect = (arrBuffer) => {\n  const floatArr = new Float32Array(arrBuffer);\n  const arr = [];\n  for (let i = 0; i < floatArr.length - 1; i += chunkSize) {\n    const z = floatArr[i];\n    const x = floatArr[i + 1];\n    const y = floatArr[i + 2];\n    // const w = ((x ** 2) + (y ** 2) + (z ** 2)) ** 0.5;\n    const vect = {\n      x, y, z,\n    };\n    arr.push(vect);\n  }\n  return arr;\n};\n\nexport const generateGeometry = () => {\n  return new THREE.Geometry();\n};\n\nexport const pushDataToGeometry = (geometry, data) => {\n  const vertices = data.map(d => new THREE.Vector3(d.x, d.y, d.z));\n  const colors = Array(data.length).fill(defaultColor);\n  geometry.vertices = geometry.vertices.concat(vertices);\n  geometry.colors = geometry.colors.concat(colors);\n  // data.forEach((d) => {\n  //   geometry.vertices.push(new THREE.Vector3(d.x, d.y, d.z));\n  //   geometry.colors.push(defaultColor);\n  // });\n};\n\nexport const generatePointCloud = (geometry) => {\n  // console.log(data);\n  const pointMaterial = new THREE.PointsMaterial({ size: 2, sizeAttenuation: false, vertexColors: THREE.VertexColors });\n  const pointCloud = new THREE.Points(geometry, pointMaterial);\n  return pointCloud;\n};\n\nexport const generateScene = () => {\n  const ele = document.getElementById('lidar');\n  const scene = new THREE.Scene();\n  const SCREEN_WIDTH = ele.clientWidth;\n  const SCREEN_HEIGHT = ele.clientHeight;\n  // camera attributes\n  const VIEW_ANGLE = 45;\n  const ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT;\n  const NEAR = 1;\n  const FAR = 10000;\n\n  // set up camera\n  const camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);\n  camera.position.set(0, 100, 0);\n  camera.lookAt(new THREE.Vector3(0, 0, 0));\n  scene.add(camera);\n\n  // the camera defaults to position (0,0,0)\n  // so pull it back (z = 400) and up (y = 100) and set the angle towards the scene origin\n  const axes = new THREE.AxesHelper(50);\n  scene.add(axes);\n\n  // const grid = new THREE.GridHelper(100, 100, 1);\n  // scene.add(grid);\n\n  const renderer = new THREE.WebGLRenderer();\n  renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);\n\n  // target position\n  // const box = new THREE.Box3();\n  // box.setFromCenterAndSize(new THREE.Vector3(5, -1, -2.5), new THREE.Vector3(2, 2, 5));\n  // const helper = new THREE.Box3Helper(box, 0xffff00);\n  // scene.add(helper);\n\n  const orbitControls = new Orbitcontrols(camera, renderer.domElement);\n  const object = {\n    scene,\n    camera,\n    renderer,\n    orbitControls,\n  };\n  window.THREE = THREE;\n  window.q = object;\n  return object;\n};\n","import React from 'react';\nimport { GoogleMap, Polyline, withGoogleMap, withScriptjs } from 'react-google-maps';\nimport * as util from './utils';\nimport './App.css';\n\n// add Google Map API Key here\n// https://developers.google.com/maps/documentation/javascript/get-api-key\nconst googleMapApiKey = 'AIzaSyD6qTu55F0bSv_Bj05mxZ8ffvxyP2rzxO0';\n\nconst MapWithPolyline = withScriptjs(withGoogleMap(props => (\n  <GoogleMap\n    defaultZoom={20}\n    center={props.currentLatLng}>\n    <Polyline path={props.polylinePath} />\n  </GoogleMap>\n)));\n\nconst delay = (ms) => new Promise((solve) => {\n  setTimeout(solve, ms);\n});\n\nconst options = [\n  'image_00',\n  'image_01',\n  'image_02',\n  'image_03'\n];\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.container = React.createRef();\n    this.geometry = util.generateGeometry();\n    this.play = false;\n  }\n\n  state = {\n    polylinePath: [],\n    currentLatLng: { lat: 49.011212804408, lng: 8.4228850417969 },\n    count: 0,\n    imageFolder: options[0]\n  }\n\n  componentDidMount = () => {\n    this.map = util.generateScene();\n    this.container.current.appendChild(this.map.renderer.domElement);\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      this.map.renderer.render(this.map.scene, this.map.camera);\n    };\n\n    animate();\n    this.start();\n  }\n\n  fetchData = async () => {\n    const no = ('0000000000' + this.state.count).slice(-10);\n\n    // 1. update radar\n    await fetch(`/drive_data/velodyne_points/data/${no}.bin`)\n      .then(res => res.arrayBuffer())\n      .then(positionArr => {\n        const vectArray = util.transferArrayBufferToVect(positionArr);\n        util.pushDataToGeometry(this.geometry, vectArray);\n\n        if (this.lastPointCloud) {\n          this.map.scene.remove(this.lastPointCloud);\n        }\n        this.lastPointCloud = util.generatePointCloud(this.geometry);\n\n        this.geometry.dispose();\n        this.geometry = util.generateGeometry();\n\n        this.map.scene.add(this.lastPointCloud);\n      });\n\n    // 2. update google map\n    await fetch(`/drive_data/oxts/data/${no}.txt`)\n      .then(res => res.text())\n      .then(file => file.split(' ', 2))\n      .then(geolocation => {\n        const currentLatLng = { lat: Number(geolocation[0]), lng: Number(geolocation[1]) };\n        const polylinePath = [...this.state.polylinePath, currentLatLng];\n        this.setState({ currentLatLng, polylinePath });\n      });\n\n    // 3. update state count\n    console.log(no);\n    this.setState({\n      count: this.state.count + 1\n    });\n  }\n\n  start = async () => {\n    if (this.state.play) return;\n\n    this.setState({ play: true });\n    try {\n      for (;;) {\n        await this.fetchData();\n        await delay(100);\n        if (this.state.play === false) break;\n      }\n    } catch (e) {\n      console.log(e);\n    } finally {\n      this.setState({ play: false });\n    }\n  }\n\n  stop = () => {\n    this.setState({ play: false });\n  }\n\n  reset = () => {\n    this.setState({\n      polylinePath: [],\n      currentLatLng: { lat: 49.011212804408, lng: 8.4228850417969 },\n      count: 0\n    });\n  }\n\n  changeImageFolder = (e) => {\n    this.setState({\n      imageFolder: e.target.value\n    });\n  }\n\n  render() {\n    const count = this.state.count > 0 ? this.state.count - 1 : this.state.count;\n    const no = ('0000000000' + count).slice(-10);\n\n    return (\n      <div className=\"app\">\n        <header>\n          <div>OTTOMETRIC</div>\n          <select onChange={this.changeImageFolder}>\n            { options.map((x, i) => <option key={i} value={x}>{x}</option>) }\n          </select>\n        </header>\n        <main>\n          <div className=\"googlemap\">\n            <MapWithPolyline\n              googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=drawing&key=${googleMapApiKey}`}\n              loadingElement={<div />}\n              containerElement={<div style={{ width: '100%', height: '100%' }} />}\n              mapElement={<div style={{ width: '100%', height: '100%' }} />}\n              currentLatLng={this.state.currentLatLng}\n              polylinePath={this.state.polylinePath}\n            />\n          </div>\n          <section>\n            <div id=\"lidar\" ref={this.container}></div>\n            <aside>\n              <div className=\"camera\">\n                <img src={`/drive_data/${this.state.imageFolder}/data/${no}.png`} alt=\"\"/>\n              </div>\n              <div className=\"information\">\n                <div><b>Photo:</b><br/>{`${no}.png`}</div>\n                <div><b>Latitude:</b><br/> {this.state.currentLatLng.lat}</div>\n                <div><b>Longitude:</b><br/> {this.state.currentLatLng.lng}</div>\n              </div>\n            </aside>\n          </section>\n        </main>\n        <footer>\n          { !this.state.play && <button onClick={this.start}>start</button> }\n          {  this.state.play && <button onClick={this.stop}>stop</button> }\n          <button onClick={this.reset}>reset</button>\n        </footer>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}